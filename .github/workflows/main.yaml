name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # fetch all history so that setuptools-scm works
          fetch-depth: 0

      # Install Mambaforge with conda-forge dependencies
      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: carbonplan-project-tests
          python-version: 3.10
          channels: conda-forge,nodefaults
          channel-priority: strict
          miniforge-version: latest
          miniforge-variant: Mambaforge
          mamba-version: '*'
          run-post: false
          use-mamba: true
          environment-file: envs/environment-dev.yml

      - name: Install package
        run: |
          conda list
          python -m pip install -e .
          python -m pip list

      - name: Tests # run tests (includes mypy checks and coverage export)
        run: |
          python -m pytest

      # - name: Upload coverage to Codecov # this automatically hooks up to Codecov
      #   uses: codecov/codecov-action@v3.1.1
      #   if: ${{ matrix.python-version }} == 3.10
      #   with:
      #     file: ./coverage.xml
      #     fail_ci_if_error: false

  # docker:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: flase
  #     matrix:
  #       image:
  #         - python-notebook
  #         - R-notebook
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Docker meta
  #       id: docker_meta
  #       uses: crazy-max/ghaction-docker-meta@v2.3.0
  #       with:
  #         images: |
  #           carbonplan/forests-${{matrix.image}}
  #         tag-sha: true
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: envs/${{matrix.image}}
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.docker_meta.outputs.tags }}
  #         labels: ${{ steps.docker_meta.outputs.labels }}
